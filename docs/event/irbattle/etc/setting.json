{
    "json_save": "parseData.json",
    "parsed_md5_list": [
        "54546d559a56f307d8bc62aaf13d715b",
        "afcdc8f5c2a32d324290fa84ed092913",
        "a12afebe9fcd3ba10882cba03253ace3",
        "fb96465e52ad031e66a38181cdb0d991",
        "80c3bed3f9741ae5746c5bad2e838c9f",
        "955c80273a24c2afab3991794483c078",
        "263263025de9df0a672427fbaad503fc",
        "d302cf39d37d5772a3ea8222f9881209",
        "7eb74376998c4e277a2a700d10f00605",
        "db172fbf3cd7ff179812394ae1f70ec7",
        "866524aaec9a798346594e4c21da2298",
        "193c37eec39237e4073d36b6b7617e34",
        "e84e2e6b6fce1553ca2e1226c7902b33",
        "e247ba36d83176a89304c39a8be5b876",
        "62e0dca4c0e0c53e02d8071bde4f23f4",
        "d595971d8c865b9a4367660486b9de6b",
        "41192435b9a49e20784a7a704fa071ca",
        "dcda027a37fd2fd8abe3b98867d2b768",
        "af2fd0e30bb7547de89d207b4d5807c5",
        "ce151ba23ea2aa146a0321f8adb04ed5",
        "9299c524b16ff777ac135041a17b1984",
        "6d53695f5abc7594d9d705c6da80994f",
        "58b8a4ab5f84e3be8805606ef0ee8077",
        "54983990c9fab723813cea42feb65b20",
        "3c474ba73a14089c5732099e13e78b05",
        "535a86cc86d8cea8dc3f0fb4419ad96f",
        "741aaa9361f50821d1859c3dfef02606",
        "df3e609d3cda44ec8d93aaa98f36ce34",
        "1925b5ab0ec1fb8781a87a8a21359c7b",
        "c99b3e90b628172835610ad4ccd2c846",
        "84048d754606789f52c26ddffb35a1a7",
        "c3e78eb3c4a0ff7928f6d39ea5c3231f",
        "0fc70f8992a4788991c1da023b776940",
        "dec75a8d78f0a4e809a7c433975250ec",
        "0a442d08b89d23983fa390fc2656a6fc",
        "08b6c8951c71d6e02bb86c0a14576243",
        "2cfec0e81eea7e01d8d3cbbeeb4cb48f",
        "330ec2f7f8a8cf46455d331706e84c88",
        "899fde655fdd0213ab7df89fa577dfe8",
        "c1b55ce3bea1965441355f042aa85727",
        "3bbb325d6a6909474783a97403bd54bd",
        "2b6640d408f8a7f10bea55b35d8f82f5",
        "dd36e9c11a77222a64e7f4e39deec7a3",
        "7809898376079d1d00af68426d050646",
        "5e05f6064ca48c572c931d50aa34fbbe",
        "1efefbc13b8e4642de1767b7ce7fa7c1",
        "8a328baf5f97821b7d79b1cf98e39d8d",
        "091ee36003f6df18310afa4d17c75e40",
        "c14b857162a9f4238104d66f2440080e",
        "9f7c09ed1abb785963b12bf0a89b7eae",
        "f1e280749a7c83af7208ba9076156a02",
        "a7de9c2c47bf0e05a4641947e4cb0294",
        "feff7bff7a1555e99dc1d8c754a894b4",
        "3450980c996be99f58926660fb0f4c0b",
        "585157e240494c8c8bab720342e54552",
        "ab3cda326b21e686176dd77798b33467",
        "49a213c7f71d0bfd4d2a65d4e8087b2d",
        "c1d3979379c39e6e58e15189b1cfe262",
        "97b5e9ba5d721ef74a2c60baa4a318af",
        "318d9e17312d3855ddd447048ddad70b",
        "694974f043eb904a080ddf93a24bd117",
        "b04aaa49064242663973efea2fd2b67c",
        "cf790901b8b0613fc179860eb21a87fa",
        "a4c20fb7342ec43979c0ebe2570bd4ae",
        "4d2f1368b083ae1e89c5ac3edb129a22",
        "9b290c783b59c02b87881b97421cc483",
        "61222261a5d38c9c7be2858267aa511f",
        "4e8dc025f0bd31e7cbf4a24960fb7246",
        "98b01841c1e260f1372d4611e51d32ab",
        "b0a835229571aa183ab9ced90b717d4b",
        "f622ab7c7671ee30d0a156f342bff515",
        "1fdc7462ecad0480506e0a64cc4db0b9",
        "8bcf334429d82640e0acdf8f096a65c1",
        "b7ca8613d4b77fff2b9e0f3e8a11320c",
        "5b7fecfaf9f28ccb7d0046cfb6e85841",
        "d5c60aeba954cc183d817265f3faaf0d",
        "d024d59c319957e08e6a992e6b84d925",
        "9d7929c8b92169acdbbea3a6f1b7d5f8",
        "0be8d5ff297374afdd03c6fe0b3ad930",
        "063916ee4e1c2647715df4f72eba2172",
        "da8206a8aefae82c360e7e07ea969e8a",
        "94b7577cbb11b9205653b694ff8012e9"
    ],
    "score_calculate": [
        "100*rate   #A00",
        "10*min(3,max(0,round(rate//(1/9)-5)))+[0,15,20,25,30][min(clear,4)]+40*combo/notes #A01",
        "100*rate   #A03",
        "[0,3,5][max(0,clear-3)]+round(score/35.7)   #A04",
        "[0,10,20,40,55][min(clear,4)] + [0,10,30,45][min(3,max(0,round(rate//(1/9)-5)))]   #A08",
        "max(0,80*rate+clear*5-bp/2)   #A10",
        "([0,10,20,40,55][min(clear,4)] + [0,10,20,40,45][min(4,max(0,round(rate//(1/9)-4)))])*(1-is_sran) #A11",
        "25*min(clear, 4)   #A12",
        "max(0, (combo-20)/5)   #A13",
        "min(100, [0,5,15,30,40][min(clear,4)] + max(0, 2*int(100*rate - 65)))   #A15",
        "min(100, 5*(combo/notes)+max(0, (100-bp)/2)+50*rate) #A16",
        "2*clear+90*rate*combo/notes    #A17",
        "max(0, 100*rate-bp)   #A18",
        "max(0, 100*rate - (10 - 100 / (10 + bp)))    #A19",
        "60*rate+10*(1+min(clear,3)) if rate>0.1 else 100*rate   #A20",
        "round(min(90, max(0, 100*rate-5)))+[0,0,5,7,10][min(clear,4)]   #A21",
        "100*combo/notes   #A23",
        "min(combo / 40, 100)   #A24",
        "50*rate+50*(combo/notes) #B00",
        "10*min(3, clear)+max(0, (200-bp)/10)+30*rate+20*(combo/notes)   #B01",
        "100 * (20 / (21 + bp) + rate**2.5 - (rate**2.5) * 20 / (21 + bp))   #B04",
        "min(100, round(80*rate)+[3,7,10][combo//755]+[0,5,7,10][min(clear,3)]) if rate>0.05 else 100*rate #B05",
        "10*(4+min(5, max(0, round((rate-0.74)//0.04)))) + (clear>=4)*10  if rate>0.1 else 100*rate   #B07",
        "min((150 / (math.exp(7.5 - 8.2 * rate) + 1) + (clear>=4)*30), 100)   #B08",
        "100 * max(0, min(1, (rate - 12 / 18) / (5 / 18)))   #B10",
        "[0,10,20,90,100][min(clear,4)]   #B11",
        "min(100, (10**(clear-1)-0.1)+50*rate)   #B13",
        "min(100, [0,10,15,30,40][min(4, clear)] + max(0, int(100*rate - 35)))   #B14",
        "10*(1+min(5, max(0, round((rate-0.70)//0.05)))) + 8*((combo//459)+1)  if rate>0.1 else 100*rate   #B16",
        "min(100, [0,20,30,60][min(clear,3)]+max(0, (144-bp)/4)+10*rate)   #B17",
        "round(min(90, max(0, 100*rate)))+[0,0,5,7,10][min(clear,4)]   #B18",
        "75*rate+[0,2,2.000000001,25][min(clear,3)] if clear<4 else 100   #B19",
        "10*(4+min(5, max(0, round((rate-0.63)//0.05)))) + (clear>=4)*10 if rate>0.4 else 100*rate  #B20",
        "10*min(3,max(0,round((rate//(1/9)-5))))+[0,10,16,20][min(clear,3)]+50*combo/notes   #B22",
        "round(min(90, max(0, 100*rate-5)))+[0,0,5,7,10][min(clear,4)]   #B23",
        "min(100, 10*min(3, clear)+max(0, 32.5-bp)+20*rate+20*combo/notes)   #B24",
        "100*rate   #B26",
        "min(100, [0,15,25,30][min(clear,3)] + max(0, (160-bp)/4) + 25*rate + math.log2(max(1,combo) ))   #C00",
        "min(100, 10*min(3,clear)+max(0, (120-bp)/4)+30*rate+20*combo/notes)   #C01",
        "min(max(40-bp,0),30) + clear*4 + 20*rate + min((max(combo-100,0)/100.)*6,30)   #C02",
        "min((75 / (math.exp(19.86 - 25 * rate) + 1) +  min(max(-bp/3 + 100/3, 0), 30)) * min(max(1751 - notes, 0), 1), 100)   #C03",
        "min(100, (99.05 / (math.exp(14.8 - 16 * rate) + 1) + min(max(50 - bp, 0) * 0.75, 30)))   #C04",
        "0.82+((score/100)+(2 * [0,6,7,10.5,21][min(clear,4)]))   #C05",
        "((min(clear,3.2)+5)**2-25)/42.24*50 + (max(0,combo-200)/(notes-200))*15 + (max(0,rate-0.4))/0.6*35   #C06",
        "10*(3+min(3, max(0, round((rate-0.78)//0.04))))+max(0, 40-bp) if rate>0.1 else 100*rate  #C07",
        "min(100, [0,5,15,30][min(clear,3)]+max(0, (90-bp)/3)+50*rate)   #C08",
        "min(117 / (math.exp(8.9 - 12 * rate) + 1), 100)   #C09",
        "40*rate+clear*12   #C10",
        "(math.log(score+1)*60/math.log(1954)+clear*5+15*(combo/977))*(1-is_sran)  #C11",
        "min(100, score/76)   #C12",
        "min( 100, [0,10,30,50][min(clear,3)]+max(0, (150-bp)/3)+10*rate)    #C13",
        "60*rate+10*min(4,clear+1) if rate>0.1 else rate  #C14",
        "[0,10,13,15][min(clear,3)] + [0,10,20,30][min(3,max(0,round((rate//(1/9)-5))))] + 5*max(2,6-max(0,(bp-1))//22) + 25 * combo/notes   #C16",
        "90*rate+2.5*min(4,clear+1) if rate>2.5/90 else 100*rate   #C17",
        "min(100, [0,20,30,40][min(clear,3)]+max(0, (120-bp)/4)+40*rate)   #C18",
        "60*rate+10*min(4,clear+1) if rate>0.1 else 100*rate #C19",
        "min(100, 100*rate+max(0,(28-bp))*(clear>=1)+100*(clear>=2))   #C20",
        "60*rate+10*min(4,clear+1) if rate>0.1 else 100*rate   #C21",
        "60*rate+10*min(4,clear+1) if rate>0.1 else 100*rate   #C22",
        "60*rate+10*min(4,clear+1) if rate>0.1 else 100*rate   #C23",
        "min(100, (50/math.log(3)) * math.log((combo + 562.5) / 562.5))   #C24",
        "4*math.log2(min(combo+1,1024)) * 2.5**max(0,min(1,((combo/1024)-1)))   #C25",
        "60*rate+10*min(4,clear+1) if rate>0.1 else 100*rate   #C26",
        "min(100, [0,20,30,40][min(clear,3)]+max(0, (250-bp)/5)+25*rate)   #D00",
        "min(100, (clear * 10) + 70*rate + max(0, (150 - bp) / 10))   #D01",
        "min(100, 10*min(clear,3)+max(0, (150-bp)/3)+30*rate )   #D02",
        "100*rate+50*(1-rate)*(clear>0) if clear<2 else 100   #D04",
        "100 if clear else round(100*(1-math.exp(-score*0.02)))   #D05",
        "max(50*(rate-0.5),0) + clear*7 + min(clear,1)*40   #D06",
        "90*rate+[0,1,5,10][min(3,clear)]   #D07",
        "100*rate   #D08",
        "min(100, [0,10,20,30][min(clear,3)]+max(0, 71-bp)+17*rate)   #D09",
        "100*rate   #D11",
        "10*rate+90*(clear>0)  #D13",
        "90*rate+5*min(clear,2)   #D15",
        "min(100, [0,20,30,40][min(clear,3)]+max(0, (200-bp)/4)+25*rate)   #D16",
        "max(0, min(100, 250 - bp / 5))   #D17",
        "max(0, 100*rate - bp * 0.3)  #D18",
        "rate * 90 + (math.log(combo) / math.log(notes)) * 10    #D19",
        "min(100, [0,20,30,40][min(clear,3)]+max(0, (200-bp)/4)+20*rate) #D23",
        "min(100, [0,25,36,81][min(clear,3)]+max(0, 25*(notes-bp)/notes))   #D24",
        "100*rate   #D25"
    ],
    "mention_user": "user_id",
    "discord_webhook_url": "webhook_url"
}